#!/usr/bin/env python3

import scapy.all as scapy
import argparse
import ipaddress
import logging
import os
import requests  # For online vendor lookup (if used)

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")

def get_arguments():
    parser = argparse.ArgumentParser(description="Advanced Network Discovery Tool")
    parser.add_argument("-i", "--interface", dest="interface", help="Network interface to scan (e.g., eth0, wlan0)", required=True)  # Interface is now required
    parser.add_argument("-r", "--range", dest="ip_range", help="IP range to scan (e.g., 192.168.1.0/24)")
    parser.add_argument("-v", "--verbose", action="store_true", help="Increase output verbosity")
    options = parser.parse_args()

    if options.ip_range: # If IP range is provided
        try:
            ipaddress.ip_network(options.ip_range)  # Validate IP range
        except ValueError:
            parser.error("[-] Invalid IP range specified.")
    else: #Use interface network
        try:
            iface = scapy.get_if_addr(options.interface)
            iface_netmask = scapy.get_if_netmask(options.interface)
            iface_ip = iface
            options.ip_range = str(ipaddress.IPv4Network(iface + '/' + iface_netmask, strict=False))  # Construct network address
            logging.info(f"Scanning the network of the interface: {options.ip_range}")
        except Exception as e:
            parser.error(f"[-] Could not determine network for interface: {e}")

    return options


def scan(ip_range, interface, verbose=False):
    try:
        clients_list = []
        ans, unans = scapy.srp(scapy.Ether(dst="ff:ff:ff:ff:ff:ff")/scapy.ARP(pdst=ip_range), timeout=2, iface=interface, verbose=False)

        for sent, received in ans:
            client_dict = {"ip": received.psrc, "mac": received.hwsrc}
            clients_list.append(client_dict)
            if verbose:
                logging.info(f"Discovered: {client_dict['ip']} - {client_dict['mac']}")
        return clients_list

    except Exception as e:
        logging.error(f"Scan failed: {e}")
        return []

def print_result(results_list):
    print("-----------------------------------------")
    print("IP\t\t\tMAC Address\t\tVendor")
    print("-----------------------------------------")
    for client in results_list:
        vendor = get_mac_vendor(client["mac"])
        print(f"{client['ip']}\t\t{client['mac']}\t\t{vendor}")
    print("-----------------------------------------")


def get_mac_vendor(mac_address):
    try:
        mac_prefix = mac_address.replace(":", "").upper()[:6]
        # Option 1: Local oui.txt file (you still need to create this)
        vendor_file = "oui.txt"
        if os.path.exists(vendor_file):
            with open(vendor_file, "r") as f:
                for line in f:
                    if mac_prefix in line:
                        return line.split(maxsplit=1)[1].strip()  # Improved parsing
        
        # Option 2: Online lookup (requires internet access and may be rate-limited)
        # You'll need to install the 'requests' library: pip install requests
        # url = f"https://maclookup.io/api/v2/lookup/{mac_address}" #Example, you can use any API you want
        # try:
        #     response = requests.get(url)
        #     data = response.json()
        #     if data and data["result"]:
        #         return data["result"]["company"]
        # except requests.exceptions.RequestException as e:
        #     logging.warning(f"MAC lookup failed (online): {e}")

        return "Unknown"
    except Exception as e:
        logging.error(f"Vendor lookup failed: {e}")
        return "Unknown"


if __name__ == "__main__":
    if os.geteuid() != 0:
        exit("[-] This script must be run with root privileges. Try: sudo python3 net_discover.py")

    options = get_arguments()
    scan_result = scan(options.ip_range, options.interface, options.verbose)
    print_result(scan_result)
